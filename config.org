#+TITLE: DOOM EMACS CONFIG
#+AUTHOR: LEVISA
#+PROPERTY: header-args :tangle yes
#+auto_tangle: t
#+STARTUP: showeverything
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

* EMAIL
#+BEGIN_SRC elisp
(setq user-full-name "Thong Le"
      user-mail-address "thongle857@gmail.com")
#+END_SRC
* VISUAL TWEAKS
- Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this forpresentations or streaming.
- They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
- There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the`load-theme'function. This is the default:
#+begin_src elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 15 :weight 'semi-bold))
(setq doom-theme 'doom-one)
#+end_src
- If you use `org' and don't want your org files in the default location below,
- change `org-directory'. It must be set before org loads!
#+BEGIN_SRC elisp
(setq org-directory "C:/Users/Moderator/Documents/Org/")
(setq display-line-numbers-type nil)
#+END_SRC
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
Here are some additional functions/macros that could help you configure Doom:
+ `load!' for loading external *.el files relative to this one
+ `use-package!' for configuring packages
+ `after!' for running code after a package has loaded
+ `add-load-path!' for adding directories to the `load-path', relative to this file.
+ Emacs searches the `load-path' when you load packages with `require' or `use-package'. `map!' for binding new keys
+ To get information about any of these functions/macros, move the cursor over
+ the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
+ This will open documentation for it, including demos of how they are used.
+ You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
+ they are implemented.

* PACKAGE
    #+begin_src elisp
(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    #+end_src
* DOOM APPEARANCE
#+begin_src elisp                         ; Enable time in the mode-line
(display-time-mode 1)                             ; Enable time in the mode-line
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))
(global-subword-mode 1)
#+end_src
* LSP CONFIG
#+BEGIN_SRC elisp
;; Enable C++ mode for .cpp and .h files
(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
* EMACS CONFIG
** CLEAR SNIPPETS
#+BEGIN_SRC elisp
(add-hook! 'org-babel-pre-tangle-hook
  (when (file-directory-p "snippets")
    (require 'async)
    (async-start
     (lambda ()
       (delete-directory "snippets" t (not (null delete-by-moving-to-trash))))
     (lambda (result)
       (print! "Delete snippets dir got: " result)))))
#+END_SRC
** RELOAD WITHOUT DOOM SYNC
#+BEGIN_SRC elisp
(defun doom/reload-without-sync ()
  (interactive)
  (mapc #'require (cdr doom-incremental-packages))
  (doom-context-with '(reload modules)
    (doom-run-hooks 'doom-before-reload-hook)
    (doom-load (file-name-concat doom-user-dir doom-module-init-file) t)
    (with-demoted-errors "PRIVATE CONFIG ERROR: %s"
      (general-auto-unbind-keys)
      (unwind-protect
          (startup--load-user-init-file nil)
        (general-auto-unbind-keys t)))
    (doom-run-hooks 'doom-after-reload-hook)
    (message "Config successfully reloaded!")))

(define-key! help-map "rc" #'doom/reload-without-sync)
#+END_SRC
** CLOSED BUFFER AFTER FINISH
#+BEGIN_SRC elisp
(defun bury-compile-buffer-if-successful (buffer string)
  "Bury a compilation buffer if succeeded without warnings "
  (when (and (eq major-mode 'comint-mode)
             (string-match "finished" string)
             (not
              (with-current-buffer buffer
                (search-forward "warning" nil t))))
    (run-with-timer 1 nil
                    (lambda (buf)
                      (let ((window (get-buffer-window buf)))
                        (when (and (window-live-p window)
                                   (eq buf (window-buffer window)))
                          (delete-window window))))
                    buffer)))

(add-hook 'compilation-finish-functions #'bury-compile-buffer-if-successful)
#+END_SRC
